require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#http://docs.seattlerb.org/minitest/

# support the following routes for managing appointments records
# GET    /appointments
# POST   /appointments
# GET    /appointments/:id
# PUT    /appointments/:id
# DELETE /appointments/:id

RSpec.describe AppointmentsController, type: :controller do

  # based on http://commandercoriander.net/blog/2014/01/04/test-driving-a-json-api-in-rails/
  # http://www.rubydoc.info/gems/factory_girl/file/GETTING_STARTED.md

  # This should return the minimal set of attributes required to create a valid
  # Appointment. As you add validations to Appointment, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) {
    {:start_time => Date.today + 10.days,
     :end_time => Date.today + 10.days + 30.minutes,
     :first_name => 'Barbara',
     :last_name => 'Oriel',
     :comments => 'start_now_for_30_minutes',
     :id => 1
    }
  }

  let(:invalid_attributes) {
    {:start_time => Date.today,
     :end_time => Date.today - 30.minutes,
     :first_name => 'Barbara',
     :last_name => 'Oriel',
     :comments => 'start_now_for_30_minutes',
     :id => 1}
  }

  let(:valid_session) { {} }

  describe "DELETE #destroy" do
    it "destroys the requested appointment" do
      appointment = Appointment.create! valid_attributes
      expect {
        delete :destroy, {:id => appointment.to_param}
      }.to change(Appointment, :count).by(-1)
    end
  end


  describe "Appointment API" do
    # ...
    describe "GET /appointments" do
      it "returns all the appointments" do
        appointment = Appointment.create! valid_attributes
        get :index, {}, {"Accept" => "application/json"}
        expect(response).to have_http_status(200) # test for the 200 status-code
        #expect(assigns(:appointments)).to eq([appointment])
      end
    end
  end

  describe "GET #show" do
    it "assigns the requested company as @company" do
      appointment = Appointment.create! valid_attributes
      get :show, {:id => appointment.id}, {"Accept" => "application/json"}
      expect(response).to have_http_status(200) # test for the 200 status-code
      expect(assigns(:appointment)).to eq(appointment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Appointment" do
        expect {
          post :create, {:appointment => valid_attributes}, valid_session
        }.to change(Appointment, :count).by(1)
      end

      it "assigns a newly created appointment as @appointment" do
        post :create, {:appointment => valid_attributes}, valid_session
        expect(assigns(:appointment)).to be_a(Appointment)
        expect(assigns(:appointment)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved appointment as @appointment" do
        post :create, {:appointment => invalid_attributes}, valid_session
        expect(assigns(:appointment)).to be_a_new(Appointment)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {:start_time => Date.today + 5.days,
         :end_time => Date.today + 5.days + 30.minutes,
         :first_name => 'Barbara',
         :last_name => 'Oriel',
         :comments => 'start_now_for_30_minutes',
         :id => 1
        }
      }

      new_appointment = Appointment.new({
                                            :start_time => Date.today + 5.days,
                                            :end_time => Date.today + 5.days + 30.minutes,
                                            :first_name => 'Barbara',
                                            :last_name => 'Oriel',
                                            :comments => 'start_now_for_30_minutes',
                                            :id => 1
                                        })

      it "updates the requested appointment" do
        appointment = Appointment.create! valid_attributes
        put :update, {:id => appointment.to_param, :appointment => new_attributes}, valid_session
        appointment.reload
        expect(assigns(:appointment)).to eq(new_appointment)
      end

      it "assigns the requested appointment as @appointment" do
        appointment = Appointment.create! valid_attributes
        put :update, {:id => appointment.to_param, :appointment => valid_attributes}, valid_session
        expect(assigns(:appointment)).to eq(appointment)
      end
    end

    context "with invalid params" do
      it "assigns the appointment as @appointment" do
        appointment = Appointment.create! valid_attributes
        put :update, {:id => appointment.to_param, :appointment => invalid_attributes}, valid_session
        expect(assigns(:appointment)).to eq(appointment)
      end

    end
  end


end
